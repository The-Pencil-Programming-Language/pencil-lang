// #include <stdlib.h>
// #include <stdio.h>
// #include <string.h>
// #include "tokeniser.h"
// #include "char.h"


// #define LOOKAHEAD 8

// char *source_buffer = NULL;
// char *current_input_char = NULL; 
// char *next_input_char;
// char *peekptr;

// int line = 1;
// int column = 1;



// // main tokenizer logic
// int tokeniser()
// {
//     while(1)
//     {
//         skip_comments();
        
//         char ch = *current_input_char; // look at current character

//         // EOF or end of buffer
//         if (ch == '\0' || ch == EOF_CHAR)
//         {
//             printf("DEBUG: End of file reached at line %d, column %d\n", line, column);
//             break;
//         }

        
//         // This function checks if the current character is an operator. 
//         // It also handles cases that involves compound operators such as ==, ++, -= etc.
//         if (isoperator(ch))
//         {
//             char next = peek(1);
//             // read compound operators: ==, -=, +=, >=, etc.
//             if (isoperator(next))  // check if next character is an operator
//             {
//                 if ((ch == '+' && next == '+') ||
//                     (ch == '-' && next == '-') ||
//                     (ch == '=' && next == '=') ||
//                     (ch == '+' && next == '=') ||
//                     (ch == '-' && next == '=') ||
//                     (ch == '!' && next == '=') ||
//                     (ch == '/' && next == '=') ||
//                     (ch == '<' && next == '=') ||
//                     (ch == '>' && next == '=') ||
//                     (ch == '*' && next == '='))
//                 {
//                     char op_buf[3]; // the two and null terminator; 
//                     op_buf[0] = ch;
//                     op_buf[1] = next;
//                     op_buf[2] = '\0';
//                     printf("DEBUG: operator = '%s' (ASCII: %d) line: %d col: %d\n", op_buf, ch, line, column);
//                     advance();
//                     advance();
//                     continue; 
//                 }
                
//                 printf("DEBUG: operator = '%c' (ASCII: %d) line: %d col: %d\n", ch, ch, line, column);
//                 advance();
//                 continue;              
//             }
//         }

//         // punctuation characters
//         else if (ispunct(ch))
//         {
//             printf("DEBUG: punctuator = '%c' (ASCII: %d) line: %d col: %d\n", ch, ch, line, column);
//             advance();
//             continue;
//         }

//         // letters
//         else if (isalpha(ch))
//         {
//             int i = 0;
//             // while(peek(i) != ' ')
//             // {
//             //     i++;
//             // }
            
//             // copy string from current input character to i
//             char *str_buf = (char *)malloc(i + 1);  // don't forget to free after creating the token
//             for(int j = 0; j < i; j++)
//             {
//                 str_buf[j] = *current_input_char;
//                 advance();
//             }
//             str_buf[i] = '\0';
            
//             printf("DEBUG: identifier = '%s' (ASCII: %d) line: %d col: %d\n", str_buf, line, column);
//             advance();
//             continue;
//         }

//         // digits
//         else if (isdigit(ch))
//         {
//             int i = 0;        
//             do {
//                 i++;
//                 char nnext = peek(i);
//                 if (ispunct(nnext) || isoperator(nnext)) break;
//             }  while(peek(i) != ' ');

//             // copy digits to form a number, decimal or floating-point
//             char *num_buf = (char *)malloc(i);
//             for(int j = 0; j < i; j++)
//             {
//                 num_buf[j] = *current_input_char;
//                 advance();
//             }
//             num_buf[i] = '\0';
//             printf("DEBUG: number = '%s' line: %d col: %d\n", num_buf, line, column);
//             advance();
//             continue;
//         }

//         // Skip whitespace (already handled by advance, but ensure no infinite loop)
//         else
//         {
//             advance();
//             continue;
//         }

//         // Unknown character fallback
//         printf("DEBUG: unknown character '%c' (ASCII: %d) at line %d, column %d\n", ch, ch, line, column);
//         advance();  // important to avoid infinite loop on unknowns

//     }

//     return 0;
// }



















